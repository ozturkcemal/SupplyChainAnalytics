{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOFz1PJFXwTOv8LrgXwdk22",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ozturkcemal/SupplyChainAnalytics/blob/main/05_Facility_Location_Network_Design/01_BasicFacilityLocation\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "en5DRZ41jko9"
      },
      "outputs": [],
      "source": [
        "#installing library to read xlsx files\n",
        "!pip install pandas openpyxl"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "id": "tCnyZCCpkGk_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "# Import libraries\n",
        "import openpyxl\n",
        "import pandas as pd\n",
        "import numpy as np  # Import NumPy for array manipulation\n",
        "\n",
        "\n",
        "# Get the file name of the uploaded file\n",
        "file_name = list(uploaded.keys())[0]\n",
        "\n",
        "# Load the workbook\n",
        "workbook = openpyxl.load_workbook(file_name, data_only=True)\n",
        "\n",
        "# Initialize a dictionary to store DataFrames for each named range\n",
        "named_ranges_data = {}\n",
        "\n",
        "# Loop through all defined names in the workbook\n",
        "for name, defined_name in workbook.defined_names.items():\n",
        "    destinations = list(defined_name.destinations)\n",
        "    if not destinations:\n",
        "        continue  # Skip if there are no destinations\n",
        "\n",
        "    for sheet_name, cell_range in destinations:\n",
        "        try:\n",
        "            sheet = workbook[sheet_name]\n",
        "\n",
        "            # If it's a single cell, handle it differently\n",
        "            if \":\" not in cell_range:  # Single cell (no colon in the range)\n",
        "                cell_value = sheet[cell_range].value\n",
        "                # Convert the single cell value into a DataFrame (1x1)\n",
        "                df = pd.DataFrame([[cell_value]])\n",
        "\n",
        "            else:\n",
        "                # Retrieve the data from the specified range\n",
        "                data = []\n",
        "                for row in sheet[cell_range]:\n",
        "                    data.append([cell.value for cell in row])\n",
        "\n",
        "                # Convert to DataFrame\n",
        "                df = pd.DataFrame(data)\n",
        "\n",
        "            # Store the DataFrame with the named range as the key\n",
        "            named_ranges_data[name] = df\n",
        "\n",
        "        except Exception as e:\n",
        "            print(f\"Error processing range {name}: {e}\")\n",
        "            continue\n",
        "\n",
        "# Create an array for each DataFrame, named after the DataFrame\n",
        "for range_name, df in named_ranges_data.items():\n",
        "    globals()[range_name] = np.array(df)  # Converts the DataFrame to a NumPy array\n",
        "\n",
        "# Example of accessing one of the dynamically created arrays\n",
        "for range_name in named_ranges_data:\n",
        "    print(f\"Array created for {range_name}:\")\n",
        "    print(globals()[range_name])\n",
        "    print()\n",
        "\n"
      ],
      "metadata": {
        "id": "M4jsgsCUkWwP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a list factories\n",
        "factories= list(range(0, factoryCost.shape[0]))\n",
        "# Print the list 'sites' to verify\n",
        "print(\"factories\",factories)\n",
        "# Create a list warehouses\n",
        "warehouses = list(range(0, len(warehouseCost)))\n",
        "# Print the list 'warehouses' to verify\n",
        "print(\"warehouses:\",warehouses)\n",
        "# Assuming budget is a NumPy array, convert budget[0] to a scalar\n",
        "budget_value = budget[0].item() if isinstance(budget[0], np.ndarray) else budget[0]\n",
        "# Print the list 'budget' to verify\n",
        "print(\"budget:\",budget_value)"
      ],
      "metadata": {
        "id": "9Vd-Eo8Zpmyf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#installing pyomo\n",
        "!pip install -q pyomo"
      ],
      "metadata": {
        "id": "KjLUS5ABywRu"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#installing coin or\n",
        "!apt-get install -y -qq coinor-cbc"
      ],
      "metadata": {
        "id": "fTef0yo1y2E1"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#importing pyomo environment\n",
        "import pyomo.environ as pyo"
      ],
      "metadata": {
        "id": "XSmcs5ibXm7b"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#creating a model object\n",
        "model = pyo.ConcreteModel()"
      ],
      "metadata": {
        "collapsed": true,
        "id": "M7D5CgmFaYN_"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#defining variables\n",
        "model.x = pyo.Var(factories, within=pyo.Binary)\n",
        "model.y = pyo.Var(warehouses, within=pyo.Binary)\n",
        "model.x.pprint()\n",
        "model.y.pprint()"
      ],
      "metadata": {
        "id": "4SfpB2wAzGCV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove any existing objective component named \"obj\"\n",
        "if hasattr(model, 'obj'):\n",
        "    model.del_component('obj')\n",
        "\n",
        "#defining objective function\n",
        "model.obj = pyo.Objective(\n",
        "    expr = sum(factoryPresentValue[i]*model.x[i] for i in factories)+sum(warehousePresentValue[j]*model.y[j] for j in warehouses),\n",
        "    sense = pyo.maximize )\n",
        "model.obj.pprint()"
      ],
      "metadata": {
        "id": "rL14K3p_zkkD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#modeling the coverage constraints\n",
        "model.constraint_budget = pyo.ConstraintList()\n",
        "model.constraint_budget.add(sum(factoryCost[i]*model.x[i] for i in factories)+sum(warehouseCost[j]*model.y[j] for j in warehouses) <=budget_value)\n",
        "model.constraint_budget.pprint()"
      ],
      "metadata": {
        "id": "2anrtJKkzt5q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#modeling the exclusive constraints\n",
        "model.constraint_exclusive = pyo.ConstraintList()\n",
        "model.constraint_exclusive.add(sum(model.y[i] for i in warehouses) <= 1)\n",
        "model.constraint_exclusive.pprint()\n"
      ],
      "metadata": {
        "id": "b4a-ChlE5i76"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Check if constraint_contingent already exists and remove it\n",
        "if hasattr(model, 'constraint_contingent'):\n",
        "    model.del_component(model.constraint_contingent)\n",
        "\n",
        "#modeling the contingent constraints\n",
        "model.constraint_contingent = pyo.ConstraintList()\n",
        "for j in warehouses:\n",
        "  model.constraint_contingent.add(model.y[j] <= model.x[j])\n",
        "model.constraint_contingent.pprint()"
      ],
      "metadata": {
        "id": "HbzQoyE30TgW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#connecting cbc solver and printing the model\n",
        "opt = pyo.SolverFactory('cbc')\n",
        "model.pprint()"
      ],
      "metadata": {
        "id": "FFnZQFwz0-9M"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#solve the model\n",
        "opt_solution = opt.solve(model)"
      ],
      "metadata": {
        "id": "-8VpT6rN1JGa"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Print the values of the decision variables\n",
        "#we are shifting the indices for presentation\n",
        "print(\"\\nFactories opening:\")\n",
        "for i in factories:\n",
        "    if model.x[i].value > 0:\n",
        "      print(f\"{i+1}: {model.x[i].value}\")\n",
        "\n",
        "print(\"\\nWarehouses opened:\")\n",
        "for j in warehouses:\n",
        "    if model.y[j].value > 0:\n",
        "      print(f\"{j+1}: {model.y[j].value}\")\n",
        "\n",
        "print(f\"Total net present value of the investment decision: {model.obj()}\")"
      ],
      "metadata": {
        "id": "euoLUn_K1OmJ"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}